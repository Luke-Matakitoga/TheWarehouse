@using TheWarehouse.Data
@using TheWarehouse.Data.Models
@inject WarehouseDbContext Context
@inject IJSRuntime JSInterop
<div class="modal" tabindex="-1" role="dialog" id="AddEdit">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add/Edit Supplier</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="input-field">
                    <label>Supplier Name</label><br />
                    <input type="text" @bind="SupplierName" />
                </div>

                <div class="input-field">
                    <label>Address Line 1</label><br />
                    <input type="text" @bind="AddressLine1" />
                </div>
                <div class="input-field">
                    <label>Address Line 2</label><br />
                    <input type="text" @bind="AddressLine2" />
                </div>
                <div class="input-field">
                    <label>City</label><br />
                    <input type="text" @bind="City" />
                </div>
                <div class="input-field">
                    <label>Postcode</label><br />
                    <input type="text" @bind="Postcode" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="SaveSupplier">Save and Close</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="PrepareToClose">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnClose{ get; set; }
    [Parameter]
    public int? SupplierToEditId { get; set; } = null;

    public string? SupplierName { get; set; }
    public string? AddressLine1 { get; set; }
    public string? AddressLine2 { get; set; }
    public string? City { get; set; }
    public string? Postcode { get; set; }

    protected override void OnParametersSet()
    {
        if (Context.Suppliers.Where(s => s.Id == SupplierToEditId).ToArray().Count() != 0)
        {
            SupplierName = Context.Suppliers.Where(s => s.Id == SupplierToEditId).ToArray()[0].Name;
            AddressLine1 = Context.Suppliers.Where(s => s.Id == SupplierToEditId).ToArray()[0].AddressLine1;
            AddressLine2 = Context.Suppliers.Where(s => s.Id == SupplierToEditId).ToArray()[0].AddressLine2;
            City = Context.Suppliers.Where(s => s.Id == SupplierToEditId).ToArray()[0].City;
            Postcode = Context.Suppliers.Where(s => s.Id == SupplierToEditId).ToArray()[0].Postcode;

        }
        else
        {
            SupplierName = "";
            AddressLine1 = "";
            AddressLine2 = "";
            City = "";
            Postcode = "";
        }
    }


    private void PrepareToClose()
    {
        SupplierToEditId = null;
    }
    private async Task SaveSupplier(){
        Supplier supplier;
        if (Context.Suppliers.Where(s=>s.Id==SupplierToEditId).ToArray().Count() != 0)
        {
            supplier = Context.Suppliers.Where(s => s.Id == SupplierToEditId).ToArray()[0];
            supplier.Name = SupplierName;
            supplier.AddressLine1 = AddressLine1;
            supplier.AddressLine2 = AddressLine2;
            supplier.City = City;
            supplier.Postcode = Postcode;
            Context.Suppliers.Update(supplier);
        }
        else
        {
            supplier = new()
                {
                    Name = SupplierName,
                    AddressLine1 = AddressLine1,
                    AddressLine2 = AddressLine2,
                    City = City,
                    Postcode = Postcode
                };

            await Context.Suppliers.AddAsync(supplier);
        }

        await Context.SaveChangesAsync();
        await JSInterop.InvokeVoidAsync("CloseModal");
        PrepareToClose();
        await OnClose.InvokeAsync();
    }
}